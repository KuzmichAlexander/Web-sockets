{"version":3,"sources":["App.js","index.js"],"names":["App","useState","messages","setMessages","value","setValue","name","setName","connected","setConnected","socket","useRef","sendMessage","e","a","preventDefault","message","id","Date","now","event","current","send","JSON","stringify","className","onSubmit","onChange","target","type","map","mess","WebSocket","onopen","onmessage","console","log","parse","data","prev","onclose","onerror","placeholder","ReactDOM","render","document","getElementById"],"mappings":"4MA2GeA,MAxGf,WAAgB,IAAD,EACqBC,mBAAS,IAD9B,mBACJC,EADI,KACMC,EADN,OAEeF,mBAAS,IAFxB,mBAEJG,EAFI,KAEGC,EAFH,OAGaJ,mBAAS,IAHtB,mBAGJK,EAHI,KAGEC,EAHF,OAIuBN,oBAAS,GAJhC,mBAIJO,EAJI,KAIOC,EAJP,KAKLC,EAASC,mBA6BTC,EAAW,uCAAG,WAAOC,GAAP,eAAAC,EAAA,yDAChBD,EAAEE,iBACEX,EAFY,iDAIVY,EAAU,CACZV,OACAU,QAASZ,EACTa,GAAIC,KAAKC,MACTC,MAAO,WAEXV,EAAOW,QAAQC,KAAKC,KAAKC,UAAUR,IACnCX,EAAS,IAXO,2CAAH,sDAcjB,OAAKG,EAuBD,qBAAKiB,UAAU,gBAAf,SACI,sBAAKA,UAAW,iBAAhB,UACI,sBAAMC,SAAUd,EAAhB,SACI,sBAAKa,UAAU,OAAf,UACI,uBAAOA,UAAW,cAAerB,MAAOA,EAAOuB,SAAU,SAAAd,GAAC,OAAIR,EAASQ,EAAEe,OAAOxB,QACzEyB,KAAK,SACZ,wBAAQJ,UAAW,gBAAiBI,KAAM,SAA1C,yEAIR,qBAAKJ,UAAU,WAAf,SACKvB,EAAS4B,KAAI,SAAAC,GAAI,OACd,8BACoB,eAAfA,EAAKX,MACA,sBAAKK,UAAU,qBAAf,sFACgBM,EAAKzB,KADrB,yEAGAyB,EAAKzB,OAASA,EACZ,qBAAKmB,UAAU,aAAf,SACKM,EAAKf,UAET,sBAAKS,UAAU,UAAf,UACAM,EAAKzB,KADL,KACayB,EAAKf,YAVrBe,EAAKd,cAjC3B,qBAAKQ,UAAU,gBAAf,SACI,qBAAKA,UAAU,QAAf,SACI,sBAAMC,SA7CtB,SAAiBb,GACbA,EAAEE,iBACFL,EAAOW,QAAU,IAAIW,UAAU,sBAE/BtB,EAAOW,QAAQY,OAAS,WACpBxB,GAAa,GACb,IAAMO,EAAU,CACZI,MAAO,aACPd,OACAW,GAAIC,KAAKC,OAEbT,EAAOW,QAAQC,KAAKC,KAAKC,UAAUR,KAEvCN,EAAOW,QAAQa,UAAY,SAACd,GACxBe,QAAQC,IAAIlC,GACZ,IAAMc,EAAUO,KAAKc,MAAMjB,EAAMkB,MACjCnC,GAAY,SAAAoC,GAAI,OAAKvB,GAAL,mBAAiBuB,QAErC7B,EAAOW,QAAQmB,QAAU,WACrBL,QAAQC,IAAI,wHAGhB1B,EAAOW,QAAQoB,QAAU,WACrBN,QAAQC,IAAI,uGAsBJ,SAEI,sBAAKX,UAAU,gBAAf,UACI,uBACIA,UAAW,cACXrB,MAAOE,EACPqB,SAAU,SAAAd,GAAC,OAAIN,EAAQM,EAAEe,OAAOxB,QAChCyB,KAAK,OACLa,YAAY,2FAChB,wBAAQb,KAAK,SAASJ,UAAW,gBAAjC,sDC5D5BkB,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,SAE1BX,QAAQC,IAAI,K","file":"static/js/main.cb0e57c4.chunk.js","sourcesContent":["import './App.css'\nimport {useEffect, useRef, useState} from \"react\"\n\nfunction App() {\n    const [messages, setMessages] = useState([])\n    const [value, setValue] = useState('')\n    const [name, setName] = useState('')\n    const [connected, setConnected] = useState(false)\n    const socket = useRef()\n\n    function connect(e) {\n        e.preventDefault()\n        socket.current = new WebSocket('ws://localhost:777')\n\n        socket.current.onopen = () => {\n            setConnected(true)\n            const message = {\n                event: 'connection',\n                name,\n                id: Date.now()\n            }\n            socket.current.send(JSON.stringify(message))\n        }\n        socket.current.onmessage = (event) => {\n            console.log(messages)\n            const message = JSON.parse(event.data)\n            setMessages(prev => [message, ...prev])\n        }\n        socket.current.onclose = () => {\n            console.log('соединение разорвано')\n\n        }\n        socket.current.onerror = () => {\n            console.log('ошибка соединения')\n        }\n    }\n\n    const sendMessage = async (e) => {\n        e.preventDefault()\n        if(!value) return\n\n        const message = {\n            name,\n            message: value,\n            id: Date.now(),\n            event: 'message'\n        }\n        socket.current.send(JSON.stringify(message))\n        setValue('')\n    }\n\n    if (!connected) {\n        return (\n            <div className=\"modal-wrapper\">\n                <div className=\"modal\">\n                    <form onSubmit={connect}>\n\n                        <div className=\"modal-content\">\n                            <input\n                                className={'modal-input'}\n                                value={name}\n                                onChange={e => setName(e.target.value)}\n                                type=\"text\"\n                                placeholder=\"Введите ваше имя\"/>\n                            <button type='submit' className={\"submit-button\"}>Войти</button>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        )\n    }\n\n\n    return (\n        <div className=\"modal-wrapper\">\n            <div className={'messages-modal'}>\n                <form onSubmit={sendMessage}>\n                    <div className=\"form\">\n                        <input className={'modal-input'} value={value} onChange={e => setValue(e.target.value)}\n                               type=\"text\"/>\n                        <button className={\"submit-button\"} type={'submit'}>Отправить</button>\n                    </div>\n                </form>\n\n                <div className=\"messages\">\n                    {messages.map(mess =>\n                        <div key={mess.id}>\n                            {mess.event === 'connection'\n                                ? <div className=\"connection_message\">\n                                    Пользователь {mess.name} подключился\n                                </div>\n                                : mess.name === name ?\n                                    <div className=\"my-message\">\n                                        {mess.message}\n                                    </div>\n                                    :<div className=\"message\">\n                                    {mess.name}: {mess.message}\n                                </div>\n                            }\n                        </div>\n                    )}\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\nconsole.log(1)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}